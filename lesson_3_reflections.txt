# Lesson 2 - Problem Set 1 (no reflections file)#
# Lesson 3 - Creating and Modifying a Repository #

Q1.
What happens when you initialize a repository? Why do you need to do it?

A1.
It creates a .git file in directory (hidden file > type@$: ls -a to see)
You need to do it to flag directory as a git repository and add relevant functionality.

Q2.
Reflect: Staging Area
Now that you’ve added a file to the staging area (or maybe multiple files!), go add the following question and your thoughts on it to your lesson_2_reflections file:

How is the staging area different from the working directory and the repository? What value do you think it offers?

A2.
You can add files from the working directory (add <filename>) to the staging area before committing them to the repository.  This allows you to choose at which commit you do so for each file (when modified).  You should try to do this in a logical (change) manner.

# Note:
How to write a commit message
You're about to make your first commit to your reflections repository. When you do this, you'll need to write a commit message describing your changes. If you followed the instructions in the "Setting Up Your Workspace" video for your platform near the end of Lesson 1, the editor you chose will appear as soon as you run git commit and allow you to write a commit message. If you get an error message, you should try revisiting the instructions in Lesson 1 and make sure your text editor is set up properly.

You can also specify a commit message via the command line by running: 
> git commit -m "Commit message" 
instead of just git commit. It's still a good idea to get an editor set up, since this will make it easier to write long commit messages that fully describe the change.
# end of Note

# Note (git diff revisited):
> git diff <commit1> <commit2> (commit1 is most recent!)
> git diff (no args - compares working dir and staging area)
> git diff --staged (compares staging area to most recent commit)
# end of note

Q3.
Reflect: Commit Size
Now that you’ve committed changes using the staging area, go add the following question and your thoughts on it to your lesson_2_reflections file:
How can you use the staging area to make sure you have one commit per logical change?

A3.
Only stage changes that constitute a logical change and can be described in the same commit message, before making that commit.

Q4.
(16) Reflect: When to Use Branches
Now that you’ve learned how to create a branch in Git, go add the following question and your thoughts on it to your reflections file:

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A4.
Branches are helpful if you want to work on different versions of the code without affecting the main (master) branch.  Maybe for new features, which may not work or a specific version, with French comments for example.

# Notes:
git log --graph (shows branches)
git log --oneline (abbreviated)
git log --graph --oneline(can be combined)
bit checkout -b <new branch name> (for detatched head state, unreachable) 
# end of note

Q5.
(21) Reflect: Visualizing with Diagrams
Now that you’ve had some experience creating branches and drawing diagrams of your history, go add the following question and your thoughts on it to your reflections file:

How do the diagrams help you visualize the branch structure?

A5.
They help you see clearly where branches diverge and then merge with the master branch.

Q6.
(33) Reflect: Automatic vs. Manual Merging
Now that you’ve learned when Git will not be able to automatically merge branches, and what happens when it can’t, go add the following question and your thoughts on it to your reflections file:

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

A6.
Pro Auto: saves time
Con Auto: less control over which details are kept/discarded




